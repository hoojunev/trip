package cn.project.travel.role.action;

import java.net.URLDecoder;
import java.util.HashSet;
import java.util.Set;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;

import cn.project.core.action.BaseAction;
import cn.project.core.exception.ActionException;
import cn.project.core.util.Constant;
import cn.project.core.util.QueryHelper;
import cn.project.travel.role.entity.Role;
import cn.project.travel.role.entity.RolePrivilege;
import cn.project.travel.role.entity.RolePrivilegeId;
import cn.project.travel.role.service.RoleService;

import com.opensymphony.xwork2.ActionContext;

public class RoleAction extends BaseAction {

	@Resource
	private RoleService roleService;

	private Role role;

	private String[] privilegeIds;
	private String strName;

	// 列表页面
	public String listUI() throws ActionException {
		// 加载权限集合
		ActionContext.getContext().getContextMap().put("privilegeMap", Constant.PRIVILEGE_MAP);
		QueryHelper queryHelper = new QueryHelper(Role.class, "");
		try {
			if(role != null){
				if(StringUtils.isNotBlank(role.getName())){
					role.setName(URLDecoder.decode(role.getName(), "utf-8"));
					queryHelper.addCondition("name like ?", "%"+ role.getName() + "%");
				}
			}
			
			pageResult = roleService.getPageResult(queryHelper, getPageNo(), getPageSize());
		} catch (Exception e) {
			return "error";
		}
		return "listUI";
	}

	// 跳转到新增页面
	public String addUI() {
		// 加载权限集合
		ActionContext.getContext().getContextMap().put("privilegeMap", Constant.PRIVILEGE_MAP);
		if(role != null){
			strName = role.getName();
		}
		return "addUI";
	}

	// 保存新增
	public String add() {
		try {
			if (role != null) {
				// 处理角色权限
				if (privilegeIds != null) {
					Set<RolePrivilege> set = new HashSet<RolePrivilege>();
					for (String code : privilegeIds) {
						set.add(new RolePrivilege(new RolePrivilegeId(role, code)));
					}
					
					role.setRolePrivileges(set);
				}
				roleService.save(role);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "list";
	}

	//
	// 跳转到编辑页面
	public String editUI() {
		// 加载权限集合
		ActionContext.getContext().getContextMap().put("privilegeMap", Constant.PRIVILEGE_MAP);

		if (role != null && StringUtils.isNotBlank(role.getRoleId())) {
			strName = role.getName();
			role = roleService.findObjectById(role.getRoleId());
			//回显角色权限
			if(role.getRolePrivileges() != null && role.getRolePrivileges().size() > 0){
				privilegeIds = new String[role.getRolePrivileges().size()];
				int i = 0;
				for(RolePrivilege rp: role.getRolePrivileges()){
					privilegeIds[i++] = rp.getId().getCode();
				}
				
			}
		}
		return "editUI";
	}

	// 保存编辑
	public String edit() {
		try {
			if (role != null) {
				// 处理角色权限
				if (privilegeIds != null) {
					Set<RolePrivilege> set = new HashSet<RolePrivilege>();
					for (String code : privilegeIds) {
						set.add(new RolePrivilege(new RolePrivilegeId(role, code)));
					}
					
					role.setRolePrivileges(set);
				}
				roleService.update(role);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "list";
	}

	//
	// 根据ID删除
	public String delete() {
		if(role != null){
			strName = role.getName();
		}
		if (role != null && StringUtils.isNotBlank(role.getRoleId())) {
			roleService.delete(role.getRoleId());
		}
		return "list";
	}

	//
	// 批量删除
	public String deleteSelected() {
		if(role != null){
			strName = role.getName();
		}
		if (selectedRow != null) {
			for (String id : selectedRow) {
				roleService.delete(id);
			}
		}
		return "list";
	}

	public Role getRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	public String[] getPrivilegeIds() {
		return privilegeIds;
	}

	public void setPrivilegeIds(String[] privilegeIds) {
		this.privilegeIds = privilegeIds;
	}

	public String getStrName() {
		return strName;
	}

	public void setStrName(String strName) {
		this.strName = strName;
	}
}
